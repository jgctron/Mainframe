****** ****Zap****Autosave********** Top of Data ******************************
 000001 //PRIMASM  JOB (BAL),                                                  
 000002 //             'Eratosthenes Sieve',                                    
 000003 //             CLASS=A,                                                
 000004 //             MSGCLASS=A,                                              
 000005 //             TIME=1440,                                              
 000006 //             MSGLEVEL=(1,1)                                          
 000007 //********************************************************************  
 000008 //*                                                                    
 000009 //* Name: SYS2.JCLLIB(PRIMASM)                                          
 000010 //*                                                                    
 000011 //* Desc: Sieve of Eratosthenes programmed in Basic Assembler Language  
 000012 //*       All prime numbers up to the value entered via PARM.GO        
 000013 //*       are computed.                                                
 000014 //*                                                                    
 000015 //********************************************************************  
 000016 //PRIMES  EXEC ASMFCG,PARM.ASM=(OBJ,NODECK),MAC1='SYS2.MACLIB',        
 000017 //             REGION.GO=128K,PARM.GO='/2000'                          
 000018 //ASM.SYSIN DD *                                                        
 000019 PRIMASM  TITLE 'Sieve of Eratosthenes: Find Prime Numbers'              
 000020 ***********************************************************************
 000021 ***                                                                 ***
 000022 *** Program:  PRIMASM                                               ***
 000023 ***                                                                 ***
 000024 *** Purpose:  Find all prime numbers up to a given limit            ***
 000025 ***           using Eratothenes' sieve algorithm.                   ***
 000026 ***                                                                 ***
 000027 *** Usage:    The following JCL is required to run PRIMASM:         ***
 000028 ***                                                                 ***
 000029 ***           //PRIMASM EXEC PGM=PRIMASM,REGION=<size>,PARM=<limit> ***
 000030 ***           //STEPLIB  DD  DSN=<loadlib>,DISP=SHR                 ***
 000031 ***           //SYSPRINT DD  SYSOUT=*                               ***
 000032 ***                                                                 ***
 000033 ***           The parameters are defined as follows:                ***
 000034 ***                                                                 ***
 000035 ***           <limit>   the largest number to sieve. All primes     ***
 000036 ***                     up to this number will be found. If the     ***
 000037 ***                     limit given is too high for the algorithm   ***
 000038 ***                     to execute within the bounds of the         ***
 000039 ***                     available virtual storage, <limit> will be  ***
 000040 ***                     adjusted to fit into the given region. If   ***
 000041 ***                     no PARM value is given, a default limit of  ***
000042 ***                     2000 will be used.                          ***
000043 ***                                                                 ***
000044 ***           <size>    the amount of virtual storage the program   ***
000045 ***                     is allowed to use. The program will always  ***
000046 ***                     allocate the maximum amount of storage      ***
000047 ***                     allowed by the REGION parameter. If no      ***
000048 ***                     REGION parameter is specified, results will ***
000049 ***                     be unpredictable.                           ***
000050 ***                                                                 ***
000051 ***           <loadlib> the load library containing the PRIMASM     ***
000052 ***                     program.                                    ***
000053 ***                                                                 ***
000054 *** Function: 1. Allocate all virtual storage available and adjust  ***
000055 ***              the sieve limit if necessary. This storage is      ***
000056 ***              used as flags, where each bit indicates whether    ***
000057 ***              the odd number corresponding to the bit's position ***
000058 ***              is prime or not. Odd numbers are assigned to these ***
000059 ***              bits in sequence, i.e. numbers 1,3,5,7,9,11,13,15  ***
000060 ***              correspond to bits 0,1,2,3,4,5,6,7 and so forth.   ***
000061 ***                                                                 ***
000062 ***           2. Set all prime flags to one, except the first.      ***
000063 ***              The first flag corresponds to the number one,      ***
000064 ***              which isn't prime. Note that there don't exist     ***
000065 ***              flags for even numbers, because even numbers       ***
000066 ***              (except the two) are never prime.                  ***
000067 ***                                                                 ***
000068 ***           3. Run Eratothenes' sieve which will result in        ***
000069 ***              clearing the prime flags of all none prime numbers ***
000070 ***              up to the given limit.                             ***
000071 ***                                                                 ***
000072 ***           4. Print all numbers having their prime flag set to   ***
000073 ***              SYSPRINT. The "irregular" two is printed manually  ***
000074 ***              for the sake of completeness.                      ***
000075 ***                                                                 ***
000076 ***           5. Print a summary message indicating the number of   ***
000077 ***              primes found up to the given limit to SYSPRINT and ***
000078 ***              to the job log.                                    ***
000079 ***                                                                 ***
000080 ***           6. Release the allocated storage.                     ***
000081 ***                                                                 ***
000082 ***           7. Exit.                                              ***
000083 ***                                                                 ***
000084 *** Updates:  2014/07/18 original implementation.                   ***
000085 ***           2014/07/21 eliminate even numbers from prime flags.   ***
000086 ***                                                                 ***
000087 *** Author:   Juergen Winkelmann, ETH Zuerich.                      ***
000088 ***                                                                 ***
000089 ***********************************************************************
000090 PRIMASM  CSECT                                                          
000091          SAVE  (14,12),,*       save registers                          
000092          LR    R12,R15          establish module addressability        
000093          USING PRIMASM,R12      tell assembler of base                  
000094          LA    R2,SAVEA         chain ..                                
000095          ST    R13,4(,R2)         .. the ..                            
000096          ST    R2,8(,R13)           .. save ..                          
000097          LR    R13,R2                 .. areas                          
000098 *                                                                      
000099 * Initialize sieve limit and virtual storage                            
000100 *                                                                      
000101          L     R2,0(,R1)        parameter list address                  
000102          LH    R1,0(,R2)        length of PARM field                    
000103          LTR   R1,R1            PARM field specified?                  
000104          BZ    NOPARM           no, use default sieve limit            
000105          L     R3,HIGHLIM       maximum PARM allowed                    
000106          LA    R4,10            maximum PARM length allowed            
000107          CR    R1,R4            maximum PARM length exceeded?          
000108          BH    HIGHPARM         yes -> use maximum as sieve limit      
000109          LA    R3,PARM+10       right justify ..                        
000110          SR    R3,R1              .. to 10 digits                      
000111          BCTR  R1,0             decrement for EXecute                  
000112          EX    R1,MOVEPARM      get PARM                                
000113          PACK  NUMDEC(8),PARM(10) pack PARM and ..                      
000114          CVB   R3,NUMDEC            .. convert to binary                
000115 HIGHPARM ST    R3,LIMIT         set sieve limit                        
000116 NOPARM   OPEN  (SYSPRINT,OUTPUT) open SYSPRINT                          
000117          GETMAIN VU,LA=GETMAX,A=ISPRIME allocate all available storage  
000118          L     R7,MAXMEM        storage amount obtained times 16 ..    
000119          SLL   R7,4               .. is maximum sieve limit possible    
000120          C     R7,LIMIT         does requested limit fit into storage?  
000121          BNL   *+8              yes -> use requested limit              
000122          ST    R7,LIMIT         no  -> use maximum possible            
000123          L     R6,ISPRIME       address of storage obtained            
000124          L     R8,LIMIT         sieve limit                            
000125          XR    R9,R9            clear R9 for modulo                    
000126          SRDL  R8,4             divide sieve limit by 16                
000127          LR    R7,R8            amount of storage to be initialized    
000128          LTR   R9,R9            sieve limit modulo 16 = 0?              
000129          BZ    *+8              yes -> use computed storage amount      
000130          LA    R7,1(,R7)        no  -> increment amount by one          
000131          XR    R8,R8            clear R8 for MVCL                      
000132          L     R9,FF            get initialization pattern for MVCL    
000133          MVCL  R6,R8            initialize prime indication flags      
000134          L     R6,ISPRIME       start of prime indication flags        
000135          MVI   0(R6),X'7F'      make one not prime                      
000136 *                                                                      
000137 * Sieve of Eratosthenes                                                
000138 *                                                                      
000139          L     R1,ISPRIME       address of prime flag array            
000140          LA    R2,CROSSOUT      masks to cross out primes              
000141          XR    R3,R3            clear for prime test EXecuted later    
000142          LA    R4,PRIMFLGS      masks for prime test                    
000143          LA    R5,1             candidate bit offset \  sieve starts    
000144          LR    R6,R1            candidate address     >      at        
000145          LA    R7,3             candidate value      /     three        
000146          LA    R14,2            incrementor for large numbers          
000147 SIEVE    LR    R9,R7            is square of ..                        
000148          MR    R8,R7              .. candidate value ..                
000149          C     R9,LIMIT             .. higher than sieve limit?        
000150          BH    PRNTPRIM         yes -> sieve complete, go print        
000151          IC    R3,0(R5,R4)      is prime flag for ..                  
000152          EX    R3,TESTPRIM        .. this candidate set?              
000153          BNO   SIEVENXT         no  -> check next candidate            
000154 CLRMULT  SLL   R7,1             only odd multiples need to be cleared  
000155 CLRMULTL LR    R10,R9           current prime multiple                
000156          BCTR  R10,0            decrement for addressing              
000157          SRL   R10,1            divide by two (address compression)    
000158          SRDL  R10,3            divide by eight                        
000159          AR    R10,R1           address of prime multiple              
000160          SRL   R11,29           bit offset of prime multiple          
000161          IC    R3,0(R11,R2)     get cross out mask                    
000162          EX    R3,CLRPRIM       cross out prime multiple              
000163          AR    R9,R7            is next odd prime multiple ..          
000164          C     R9,LIMIT           .. not higher than sieve limit?      
000165          BNH   CLRMULTL         yes -> go cross it out                
000166          SRL   R7,1             restore candidate value                
000167 SIEVENXT AR    R7,R14           next please, skip even numbers        
000168          LA    R5,1(,R5)        next bit position                      
000169          CH    R5,EIGHT         end of byte reached                    
000170          BL    SIEVE            no  -> check candidate                  
000171          LA    R5,0             yes -> reset candidate bit offset ..    
000172          LA    R6,1(,R6)                 .. and increment to next byte  
000173          B     SIEVE            go check it                            
000174 *                                                                      
000175 * Print primes                                                          
000176 *                                                                      
000177 PRNTPRIM LA    R5,1             candidate bit offset \  print starts    
000178          LR    R6,R1            candidate address     >      at        
000179          LA    R7,3             candidate value      /     three        
000180          LA    R2,2             incrementor for large limits            
000181          LA    R8,1             number of primes found, the two is ..  
000182          LA    R10,1              .. pre set and ..                    
000183          LA    R9,PRNTLINE+11     .. pre printed                        
000184          XR    R11,R11          no lines printed on this page yet      
000185          B     *+16             skip page initialization on first page  
000186 NEWLINE  MVC   CC(166),NL       new line                                
000187          LA    R9,PRNTLINE      current print position                  
000188          XR    R10,R10          no numbers printed on this line yet    
000189          CH    R11,LPP          page full?                              
000190          BNE   CHKPRIME         no -> check next number                
000191          XR    R11,R11          no lines printed on this page yet      
000192          MVI   CC,C'1'          next line starts a new page            
000193 CHKPRIME C     R7,LIMIT         sieve limit reached?                    
000194          BH    LASTLINE         yes -> print last line                  
000195          IC    R3,0(R5,R4)      is prime flag for ..                    
000196          EX    R3,TESTPRIM        .. this candidate set?                
000197          BNO   CHKNEXT          no  -> check next candidate            
000198          LA    R8,1(,R8)        yes -> increment number of primes found
000199          CVD   R7,NUMDEC        convert prime to decimal                
000200          MVC   0(11,R9),EDIT    get print format into print position    
000201          ED    1(11,R9),NUMDEC+3 format prime                          
000202          LA    R10,1(,R10)      increment number of primes and ..      
000203          LA    R9,11(,R9)         .. print position                    
000204          CH    R10,NPL          is current line filled up?              
000205          BNE   CHKNEXT          no  -> check next candidate            
000206          PUT   SYSPRINT,CC      yes -> print line                      
000207          LA    R11,1(,R11)      increment number of lines on this page  
000208          LA    R15,NEWLINE      next loop initializes a new line        
000209          B     *+8              skip adding to current line            
000210 CHKNEXT  LA    R15,CHKPRIME     next loop adds to current line          
000211          AR    R7,R2            next please, skip even numbers          
000212          LA    R5,1(,R5)        next bit position                      
000213          CH    R5,EIGHT         end of byte reached                    
000214          BLR   R15              no  -> check candidate                  
000215          LA    R5,0             yes -> reset candidate bit offset ..    
000216          LA    R6,1(,R6)                 .. and increment to next byte  
000217          BR    R15              go check it                            
000218 LASTLINE LTR   R10,R10          not yet printed primes in this line?    
000219          BZ    SUMMARY          no  -> print summary                    
000220          PUT   SYSPRINT,CC      yes -> print last primes                
000221          MVC   CC(166),NL       new line                                
000222          LA    R11,1(,R11)      increment number of lines on this page  
000223 SUMMARY  CLI   CC,C'1'          new page already started?              
000224          BE    PRINTSUM         yes -> print summary line              
000225          LA    R11,1(,R11)      no  -> increment number of lines        
000226          CH    R11,LPP          page almost full?                      
000227          BNL   *+12             yes -> start new page                  
000228          MVI   CC,C'0'          no  -> skip one line                    
000229          B     *+8              print summary                          
000230          MVI   CC,C'1'          start new page                          
000231 PRINTSUM CVD   R8,NUMDEC        convert number of primes to decimal    
000232          MVC   PRNTLINE(LSUMMARY),EDIT get summary line and formats    
000233          ED    PRNTLINE+1(11),NUMDEC+3 format number of lines          
000234          L     R8,LIMIT         get sieve limit                        
000235          CVD   R8,NUMDEC        convert to decimal                      
000236          ED    PRNTLINE+LIMITEBC+1(11),NUMDEC+3 format sieve limit      
000237          PUT   SYSPRINT,CC      print number of primes and sieve limit  
000238          MVC   TELLUSER(4),SUMWTOP get WTO prefix and suffix ..        
000239          MVC   PRNTLINE+LSUMMARY(4),SUMWTOS .. around summary line      
000240          WTO   MF=(E,TELLUSER)  print summary line in job log          
000241 *                                                                      
000242 * Cleanup and return                                                    
000243 *                                                                      
000244          FREEMAIN VU,A=ISPRIME  release storage                        
000245          CLOSE SYSPRINT         close printer                          
000246          L     R13,4(,R13)      caller's save area pointer              
000247          RETURN (14,12),RC=0    restore registers and return            
000248 *                                                                      
000249 * Data area                                                            
000250 *                                                                      
000251 SAVEA    DS    18F              save area                              
000252 MOVEPARM MVC   0(1,R3),2(R2)    EXecuted to retrieve PARM field        
000253 TESTPRIM TM    0(R6),0          EXecuted to test for being prime        
000254 CLRPRIM  NI    0(R10),0         EXecuted to cross out a prime multiple  
000255 NUMDEC   DS    D                target for decimal conversion          
000256 HIGHLIM  DC    F'2147483647'    highest possible fullword value        
000257 LIMIT    DC    F'2000'          default sieve limit                    
000258 FF       DC    X'FF000000'      prime flags initialization pattern      
000259 LPP      DC    H'64'            lines to print per page                
000260 NPL      DC    H'15'            prime numbers to print per line        
000261 EIGHT    DC    H'8'             used for loops and comparisons          
000262 PARM     DC    10C' '           PARM field goes here                    
000263 PRIMFLGS DC    B'10000000'      .. the set      ..                      
000264          DC    B'01000000'        .. bit's        ..                    
000265          DC    B'00100000'          .. position     ..                  
000266          DC    B'00010000'            .. represents   ..                
000267          DC    B'00001000'              .. a            ..              
000268          DC    B'00000100'                .. potential    ..            
000269          DC    B'00000010'                  .. prime        ..          
000270          DC    B'00000001'                    .. number       ..        
000271 CROSSOUT DC    B'01111111'      .. masks        ..                      
000272          DC    B'10111111'        .. used         ..                    
000273          DC    B'11011111'          .. to           ..                
000274          DC    B'11101111'            .. cross        ..              
000275          DC    B'11110111'              .. out          ..            
000276          DC    B'11111011'                .. none         ..          
000277          DC    B'11111101'                  .. prime        ..        
000278          DC    B'11111110'                    .. numbers      ..      
000279          DS    0F                                                      
000280 TELLUSER DS    H                WTO plist for summary message goes here
000281 NL       DC    C' '             newline carriage control              
000282 CC       DC    C'1'             formfeed on first output line          
000283 PRNTLINE DC    10C' '           line to be printed ..                  
000284          DC    C'2'               .. the prime two is ..              
000285          DC    154C' '            .. pre printed on initial line      
000286          DC    C' '             filler to receive EDit garbage        
000287 SUMWTOP  DC    X'002D8000'      prefix for summary message WTO        
000288 SUMWTOS  DC    X'02000020'      suffix for summery message WTO        
000289 EDIT     DC    2C' ',9X'20'     EDit pattern to format 9 digits        
000290          DC    C' primes up to' .. skeleton ..                        
000291 LIMITEBC EQU   *-EDIT             .. for      ..                      
000292          DC    2C' ',9X'20'         .. summary  ..                    
000293          DC    C' found'              .. line     ..                  
000294 LSUMMARY EQU   *-EDIT           summary line length                    
000295 SYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,                      X
000296                RECFM=FBA,LRECL=166,BLKSIZE=16600  DCB for SYSPRINT      
000297 GETMAX   DC    F'8'             GETMAIN plist to obtain maximum ..      
000298          DC    X'00FFFFF8'        .. storage available in region        
000299 ISPRIME  DS    F                address of allocated storage            
000300 MAXMEM   DS    F                amount of storage allocated            
000301          YREGS ,                register equates                        
000302          END   PRIMASM          end of PRIMASM                          
000303 /*                                                                      
000304 //GO.SYSPRINT DD SYSOUT=*                                              
000305 //                                                                      
****** ****Zap****Autosave********* Bottom of Data **************************** 
